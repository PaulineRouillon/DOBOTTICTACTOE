// This file was automatically generated.  Do not modify.

'use strict';

goog.provide('Blockly.Msg.lt');

goog.require('Blockly.Msg');

Blockly.Msg.ADD_COMMENT = "Palikti komentarą";
Blockly.Msg.AUTH = "Norint išsaugoti (ir dalintis) savo sukurtas programas, reikia prisijungti (autorizuotis).";
Blockly.Msg.CHANGE_VALUE_TITLE = "Keisti reikšmę:";
Blockly.Msg.CHAT = "Galite susirašinėti su projekto bendradarbiais.";
Blockly.Msg.CLEAN_UP = "Išvalyti blokus";
Blockly.Msg.COLLAPSE_ALL = "Suskleisti blokus";
Blockly.Msg.COLLAPSE_BLOCK = "Suskleisti bloką";
Blockly.Msg.COLOUR_BLEND_COLOUR1 = "1 spalva";
Blockly.Msg.COLOUR_BLEND_COLOUR2 = "2 spalva";
Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";  // untranslated
Blockly.Msg.COLOUR_BLEND_RATIO = "santykis";
Blockly.Msg.COLOUR_BLEND_TITLE = "sumaišyk";
Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Sumaišo dvi spalvas su pateiktu santykiu (0.0 - 1.0).";
Blockly.Msg.COLOUR_PICKER_HELPURL = "https://lt.wikipedia.org/wiki/Spalva";
Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Pasirinkti spalvą iš paletės.";
Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";  // untranslated
Blockly.Msg.COLOUR_RANDOM_TITLE = "atsitiktinė spalva";
Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Pasirinkti spalvą atsitiktinai.";
Blockly.Msg.COLOUR_RGB_BLUE = "mėlyna";
Blockly.Msg.COLOUR_RGB_GREEN = "žalia";
Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";  // untranslated
Blockly.Msg.COLOUR_RGB_RED = "raudona";
Blockly.Msg.COLOUR_RGB_TITLE = "spalva su";
Blockly.Msg.COLOUR_RGB_TOOLTIP = "Spalvą galima sudaryti iš raudonos, žalios ir mėlynos dedamųjų. Kiekvienos intensyvumas nuo 0 iki 100.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";  // untranslated
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "nutraukti kartojimą";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "šį kartą praleisti likusius veiksmus ir tęsti kartojimą";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Nutraukia (artimiausią) vykstantį kartojimą.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Praleidžia žemiau išvardintus kartojimo veiksmus (ir tęsia darbą nuo kartojimo pradinio veiksmo).";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Atsargiai: šis blokas gali būt naudojamas tik kartojimo bloko viduje.";
Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://github.com/google/blockly/wiki/Loops#for-each";  // untranslated
Blockly.Msg.CONTROLS_FOREACH_TITLE = "kartok su kiekvienu %1 iš sąrašo %2";
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "Kartok veiksmus, kol kintamasis \"%1\" paeiliui gauna kiekvieną sąrašo reikšmę.";
Blockly.Msg.CONTROLS_FOR_HELPURL = "https://github.com/google/blockly/wiki/Loops#count-with";  // untranslated
Blockly.Msg.CONTROLS_FOR_TITLE = "kartok, kai %1 kinta nuo %2 iki %3 po %4";
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "Kartoti veiksmus su kiekvienu sąrašo elementu, priskirtu kintamajam \"%1\".";
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Pridėti sąlygą „jei“ blokui.";
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Pridėti veiksmų vykdymo variantą/\"šaką\", kai netenkinama nė viena sąlyga.";
Blockly.Msg.CONTROLS_IF_HELPURL = "https://github.com/google/blockly/wiki/IfElse";  // untranslated
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "Galite pridėt/pašalinti/pertvarkyti  sąlygų \"šakas\".";
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "kitu atveju";
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "arba jei";
Blockly.Msg.CONTROLS_IF_MSG_IF = "jei";
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "Jeigu sąlyga tenkinama, tai atlik veiksmus.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "Jei sąlyga tenkinama, atlikti jai priklausančius veiksmus, o jei ne -- atlikti kitus nurodytus veiksmus.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "Jei pirma sąlyga tenkinama, atlikti jai priklausančius veiksmus, O jei ne, tikrinti antrą sąlygą -- ir jei ši tenkinama, atlikti jos veiksmus.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "Jei pirma sąlyga tenkinama, atlikti jai priklausančius veiksmus, O jei ne, tikrinti antrą sąlygą -- ir jei ši tenkinama, atlikti jos veiksmus. Kitais atvejais -- atlikti paskutinio bloko veiksmus.";
Blockly.Msg.CONTROLS_REPEAT_HELPURL = "https://en.wikipedia.org/wiki/For_loop";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "daryti";
Blockly.Msg.CONTROLS_REPEAT_TITLE = "pakartokite %1 kartus";
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Leidžia atlikti išvardintus veiksmus kelis kartus.";
Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://github.com/google/blockly/wiki/Loops#repeat";  // untranslated
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "kartok, kol pasieksi";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "kartok kol";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "Kartoja veiksmus, kol bus pasiekta nurodyta sąlyga.";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "Kartoja veiksmus, kol sąlyga tenkinama.";
Blockly.Msg.DELETE_ALL_BLOCKS = "Ištrinti visus %1 blokus?";
Blockly.Msg.DELETE_BLOCK = "Ištrinti bloką";
Blockly.Msg.DELETE_X_BLOCKS = "Ištrinti %1 blokus";
Blockly.Msg.DISABLE_BLOCK = "Išjungti bloką";
Blockly.Msg.DUPLICATE_BLOCK = "Kopijuoti";
Blockly.Msg.ENABLE_BLOCK = "Įjungti bloką";
Blockly.Msg.EXPAND_ALL = "Išskleisti blokus";
Blockly.Msg.EXPAND_BLOCK = "Išskleisti bloką";
Blockly.Msg.EXTERNAL_INPUTS = "Išdėstyti stulpeliu, kai daug parametrų";
Blockly.Msg.HELP = "Pagalba";
Blockly.Msg.INLINE_INPUTS = "Išdėstyti vienoje eilutėje";
Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-empty-list";  // untranslated
Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "tuščias sąrašas";
Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Grąžina sąrašą, ilgio 0, neturintį duomenų";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "sąrašas";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Add, remove, or reorder sections to reconfigure this list block.";  // untranslated
Blockly.Msg.LISTS_CREATE_WITH_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "sukurti sąrašą su";
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Pridėti elementą į sąrašą.";
Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Sukurti sąrašą iš bet kokio skaičiaus elementų.";
Blockly.Msg.LISTS_GET_INDEX_FIRST = "pirmas";
Blockly.Msg.LISTS_GET_INDEX_FROM_END = "# nuo galo";
Blockly.Msg.LISTS_GET_INDEX_FROM_START = "#";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_GET = "paimk";
Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "paimk ir ištrink";
Blockly.Msg.LISTS_GET_INDEX_LAST = "paskutinis";
Blockly.Msg.LISTS_GET_INDEX_RANDOM = "atsitiktinis";
Blockly.Msg.LISTS_GET_INDEX_REMOVE = "pašalinti";
Blockly.Msg.LISTS_GET_INDEX_TAIL = "";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Grąžina pirmąjį sąrašo elementą.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_END = "Returns the item at the specified position in a list. #1 is the last item.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_START = "Returns the item at the specified position in a list. #1 is the first item.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Grąžina paskutinį elementą iš sąrašo.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Grąžina atsitiktinį elementą iš sąrašo.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Removes and returns the first item in a list.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_END = "Removes and returns the item at the specified position in a list. #1 is the last item.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_START = "Removes and returns the item at the specified position in a list. #1 is the first item.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Removes and returns the last item in a list.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Removes and returns a random item in a list.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Removes the first item in a list.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_END = "Removes the item at the specified position in a list. #1 is the last item.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_START = "Removes the item at the specified position in a list. #1 is the first item.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Removes the last item in a list.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Removes a random item in a list.";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "iki # nuo galo";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "iki #";
Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "iki galo";
Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "sąrašo dalis nuo pradžios";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "sąrašo dalis nuo # nuo galo";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "sąrašo dalis nuo #";
Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Creates a copy of the specified portion of a list.";  // untranslated
Blockly.Msg.LISTS_INDEX_OF_FIRST = "rask pirmą reikšmę";
Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";  // untranslated
Blockly.Msg.LISTS_INDEX_OF_LAST = "rask paskutinę reikšmę";
Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "Grąžina pirmos/paskutinės reikšmės eilės nr. sąraše. Grąžina 0, jei reikšmės neranda.";
Blockly.Msg.LISTS_INLIST = "sąraše";
Blockly.Msg.LISTS_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#is-empty";  // untranslated
Blockly.Msg.LISTS_ISEMPTY_TITLE = "%1 yra tuščias";
Blockly.Msg.LISTS_ISEMPTY_TOOLTIP = "Grąžina „true“, jeigu sąrašas tuščias.";
Blockly.Msg.LISTS_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Lists#length-of";  // untranslated
Blockly.Msg.LISTS_LENGTH_TITLE = "ilgis %1";
Blockly.Msg.LISTS_LENGTH_TOOLTIP = "Grąžina sąrašo ilgį.";
Blockly.Msg.LISTS_REPEAT_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg.LISTS_REPEAT_TITLE = "sukurk sąrašą, kuriame %1 bus %2 kartus";
Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Creates a list consisting of the given value repeated the specified number of times.";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://github.com/google/blockly/wiki/Lists#in-list--set";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "kaip";
Blockly.Msg.LISTS_SET_INDEX_INSERT = "įterpk į vietą";
Blockly.Msg.LISTS_SET_INDEX_SET = "priskirk elementui";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Inserts the item at the start of a list.";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_END = "Inserts the item at the specified position in a list. #1 is the last item.";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_START = "Inserts the item at the specified position in a list. #1 is the first item.";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Append the item to the end of a list.";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Inserts the item randomly in a list.";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Sets the first item in a list.";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_END = "Sets the item at the specified position in a list. #1 is the last item.";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_START = "Sets the item at the specified position in a list. #1 is the first item.";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Sets the last item in a list.";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Sets a random item in a list.";  // untranslated
Blockly.Msg.LISTS_SORT_HELPURL = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";  // untranslated
Blockly.Msg.LISTS_SORT_ORDER_ASCENDING = "ascending";  // untranslated
Blockly.Msg.LISTS_SORT_ORDER_DESCENDING = "descending";  // untranslated
Blockly.Msg.LISTS_SORT_TITLE = "sort %1 %2 %3";  // untranslated
Blockly.Msg.LISTS_SORT_TOOLTIP = "Sort a copy of a list.";  // untranslated
Blockly.Msg.LISTS_SORT_TYPE_IGNORECASE = "alphabetic, ignore case";  // untranslated
Blockly.Msg.LISTS_SORT_TYPE_NUMERIC = "numeric";  // untranslated
Blockly.Msg.LISTS_SORT_TYPE_TEXT = "alphabetic";  // untranslated
Blockly.Msg.LISTS_SPLIT_HELPURL = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";  // untranslated
Blockly.Msg.LISTS_SPLIT_LIST_FROM_TEXT = "make list from text";  // untranslated
Blockly.Msg.LISTS_SPLIT_TEXT_FROM_LIST = "make text from list";  // untranslated
Blockly.Msg.LISTS_SPLIT_TOOLTIP_JOIN = "Join a list of texts into one text, separated by a delimiter.";  // untranslated
Blockly.Msg.LISTS_SPLIT_TOOLTIP_SPLIT = "Split text into a list of texts, breaking at each delimiter.";  // untranslated
Blockly.Msg.LISTS_SPLIT_WITH_DELIMITER = "with delimiter";  // untranslated
Blockly.Msg.LOGIC_BOOLEAN_FALSE = "klaidinga";
Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "https://github.com/google/blockly/wiki/Logic#values";  // untranslated
Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Reikšmė gali būti \"teisinga\"/\"Taip\" arba \"klaidinga\"/\"Ne\".";
Blockly.Msg.LOGIC_BOOLEAN_TRUE = "tiesa";
Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";  // untranslated
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Tenkinama, jei abu reiškiniai lygūs.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Return true if the first input is greater than the second input.";  // untranslated
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Return true if the first input is greater than or equal to the second input.";  // untranslated
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Return true if the first input is smaller than the second input.";  // untranslated
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Return true if the first input is smaller than or equal to the second input.";  // untranslated
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Return true if both inputs are not equal to each other.";  // untranslated
Blockly.Msg.LOGIC_NEGATE_HELPURL = "https://github.com/google/blockly/wiki/Logic#not";  // untranslated
Blockly.Msg.LOGIC_NEGATE_TITLE = "ne %1";
Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Returns true if the input is false. Returns false if the input is true.";  // untranslated
Blockly.Msg.LOGIC_NULL = "nieko";
Blockly.Msg.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";  // untranslated
Blockly.Msg.LOGIC_NULL_TOOLTIP = "Reikšmė nebuvo nurodyta...";
Blockly.Msg.LOGIC_OPERATION_AND = "ir";
Blockly.Msg.LOGIC_OPERATION_HELPURL = "https://github.com/google/blockly/wiki/Logic#logical-operations";  // untranslated
Blockly.Msg.LOGIC_OPERATION_OR = "arba";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Bus teisinga, kai abi sąlygos bus tenkinamos.";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Return true if at least one of the inputs is true.";  // untranslated
Blockly.Msg.LOGIC_TERNARY_CONDITION = "sąlyga";
Blockly.Msg.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";  // untranslated
Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "jei ne";
Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "jei taip";
Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "Jeigu sąlygą tenkinama, grąžina pirmą reikšmę, o jei ne - antrąją.";
Blockly.Msg.MATH_ADDITION_SYMBOL = "+";  // untranslated
Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://en.wikipedia.org/wiki/Arithmetic";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Grąžina dviejų skaičių sumą.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Grąžina dviejų skaičių dalmenį.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Grąžina dviejų skaičių skirtumą.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Grąžina dviejų skaičių sandaugą.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Grąžina pirmą skaičių pakeltą laipsniu pagal antrą skaičių.";
Blockly.Msg.MATH_CHANGE_HELPURL = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";  // untranslated
Blockly.Msg.MATH_CHANGE_TITLE = "padidink %1 (emptypage) %2";
Blockly.Msg.MATH_CHANGE_TOOLTIP = "Prideda skaičių prie kintamojo '%1'. Kai skaičius neigiamas - gaunasi atimtis.";
Blockly.Msg.MATH_CONSTANT_HELPURL = "https://en.wikipedia.org/wiki/Mathematical_constant";  // untranslated
Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Return one of the common constants: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), or ∞ (infinity).";  // untranslated
Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";  // untranslated
Blockly.Msg.MATH_CONSTRAIN_TITLE = "apribok %1 tarp %2 ir %3";
Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Constrain a number to be between the specified limits (inclusive).";  // untranslated
Blockly.Msg.MATH_DIVISION_SYMBOL = "÷";  // untranslated
Blockly.Msg.MATH_IS_DIVISIBLE_BY = "yra dalus iš";
Blockly.Msg.MATH_IS_EVEN = "yra lyginis";
Blockly.Msg.MATH_IS_NEGATIVE = "yra neigiamas";
Blockly.Msg.MATH_IS_ODD = "yra nelyginis";
Blockly.Msg.MATH_IS_POSITIVE = "yra teigiamas";
Blockly.Msg.MATH_IS_PRIME = "yra pirminis";
Blockly.Msg.MATH_IS_TOOLTIP = "Patikrina skaičiaus savybę: (ne)lyginis/pirminis/sveikasis/teigiamas/neigiamas/dalus iš x.";
Blockly.Msg.MATH_IS_WHOLE = "yra sveikasis";
Blockly.Msg.MATH_MODULO_HELPURL = "https://en.wikipedia.org/wiki/Modulo_operation";  // untranslated
Blockly.Msg.MATH_MODULO_TITLE = "dalybos liekana %1 ÷ %2";
Blockly.Msg.MATH_MODULO_TOOLTIP = "Return the remainder from dividing the two numbers.";  // untranslated
Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "×";  // untranslated
Blockly.Msg.MATH_NUMBER_HELPURL = "https://lt.wikipedia.org/wiki/Skaičius";
Blockly.Msg.MATH_NUMBER_TOOLTIP = "Skaičius.";
Blockly.Msg.MATH_ONLIST_HELPURL = "";  // untranslated
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "vidurkis";
Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "didžiausia reikšmė sąraše";
Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "mediana sąrašui";
Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "mažiausia reikšmė sąraše";
Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "statistinė moda sąrašui";
Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "atsitiktinis elementas iš sąrašo";
Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "standartinis nuokrypis sąraše";
Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "suma";
Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Return the average (arithmetic mean) of the numeric values in the list.";  // untranslated
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "Return the largest number in the list.";  // untranslated
Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Grąžinti sąrašo medianą.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "Return the smallest number in the list.";  // untranslated
Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "Grąžinti sąrašą dažniausių elementų sąraše.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Grąžinti atsitiktinį elementą iš sąrašo.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Return the standard deviation of the list.";  // untranslated
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "didžiausia reikšmė";
Blockly.Msg.MATH_POWER_SYMBOL = "^";  // untranslated
Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";  // untranslated
Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "atsitiktinė trupmena";
Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Atsitiktinė trupmena nuo 0 (imtinai) iki 1 (neimtinai).";
Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";  // untranslated
Blockly.Msg.MATH_RANDOM_INT_TITLE = "atsitiktinis sveikas sk. nuo %1 iki %2";
Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Return a random integer between the two specified limits, inclusive.";  // untranslated
Blockly.Msg.MATH_ROUND_HELPURL = "https://en.wikipedia.org/wiki/Rounding";  // untranslated
Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "apvalink";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN = "apvalink žemyn";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP = "apvalink aukštyn";
Blockly.Msg.MATH_ROUND_TOOLTIP = "Round a number up or down.";  // untranslated
Blockly.Msg.MATH_SINGLE_HELPURL = "https://en.wikipedia.org/wiki/Square_root";
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "modulis";
Blockly.Msg.MATH_SINGLE_OP_ROOT = "kvadratinė šaknis";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "Skaičiaus modulis - reikšmė be ženklo (panaikina minusą).";
Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "Grąžinti skaičių laipsniu e.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LN = "Grąžinti skaičiaus natūrinį logaritmą.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "Return the base 10 logarithm of a number.";  // untranslated
Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "Grąžina skaičiui priešingą skaičių.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10 = "Grąžinti skaičių laipsniu 10.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "Return the square root of a number.";  // untranslated
Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";  // untranslated
Blockly.Msg.MATH_TRIG_ACOS = "acos";  // untranslated
Blockly.Msg.MATH_TRIG_ASIN = "asin";  // untranslated
Blockly.Msg.MATH_TRIG_ATAN = "atan";  // untranslated
Blockly.Msg.MATH_TRIG_COS = "cos";  // untranslated
Blockly.Msg.MATH_TRIG_HELPURL = "https://lt.wikipedia.org/wiki/Trigonometrinės_funkcijos";
Blockly.Msg.MATH_TRIG_SIN = "sin";  // untranslated
Blockly.Msg.MATH_TRIG_TAN = "tan";  // untranslated
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "Grąžinti skaičiaus arkkosinusą.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "Grąžinti skaičiaus arksinusą.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "Grąžinti skaičiaus arktangentą.";
Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "Grąžinti laipsnio kosinusą (ne radiano).";
Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "Grąžinti laipsnio sinusą (ne radiano).";
Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "Grąžinti laipsnio tangentą (ne radiano).";
Blockly.Msg.ME = "Mane";
Blockly.Msg.NEW_VARIABLE = "Naujas kintamasis...";
Blockly.Msg.NEW_VARIABLE_TITLE = "Naujo kintamojo pavadinimas:";
Blockly.Msg.ORDINAL_NUMBER_SUFFIX = "";  // untranslated
Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "leisti vidinius veiksmus";
Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "pagal:";
Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";  // untranslated
Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Vykdyti sukurtą komandą \"%1\".";
Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";  // untranslated
Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Įvykdyti komandą \"%1\" ir naudoti jos suskaičiuotą (atiduotą) reikšmę.";
Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "su:";
Blockly.Msg.PROCEDURES_CREATE_DO = "Sukurti \"%1\"";
Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT = "Describe this function...";  // untranslated
Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "";  // untranslated
Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";  // untranslated
Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "daryk kažką";
Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "komanda:";
Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Sukuria procedūrą - komandą, kuri nepateikia jokio rezultato (tik atlieka veiksmus).";
Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";  // untranslated
Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "duok";
Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Sukuria funkciją - komandą, kuri ne tik atlieka veiksmus bet ir pateikia (grąžina/duoda) rezultatą.";
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Ši komanda turi du vienodus gaunamų duomenų pavadinimus.";
Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Highlight function definition";  // untranslated
Blockly.Msg.PROCEDURES_IFRETURN_HELPURL = "http://c2.com/cgi/wiki?GuardClause";  // untranslated
Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "Jeigu pirma reikšmė yra teisinga (sąlyga tenkinama), grąžina antrą reikšmę.";
Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Perspėjimas: šis blokas gali būti naudojamas tik aprašant funkciją.";
Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "parametro pavadinimas:";
Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Pridėti funkcijos parametrą (gaunamų duomenų pavadinimą).";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "gaunami duomenys (parametrai)";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Tvarkyti komandos gaunamus duomenis (parametrus).";
Blockly.Msg.REDO = "Redo";  // untranslated
Blockly.Msg.REMOVE_COMMENT = "Pašalinti komentarą";
Blockly.Msg.RENAME_VARIABLE = "Pervardyti kintamajį...";
Blockly.Msg.RENAME_VARIABLE_TITLE = "Pervadinti visus '%1' kintamuosius į:";
Blockly.Msg.TEXT_APPEND_APPENDTEXT = "pridėk tekstą";
Blockly.Msg.TEXT_APPEND_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg.TEXT_APPEND_TO = "prie";
Blockly.Msg.TEXT_APPEND_TOOLTIP = "Append some text to variable '%1'.";  // untranslated
Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";  // untranslated
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = " mažosiom raidėm";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = " Pavadinimo Raidėmis";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = " DIDŽIOSIOM RAIDĖM";
Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Return a copy of the text in a different case.";  // untranslated
Blockly.Msg.TEXT_CHARAT_FIRST = "gauti pirmą raidę";
Blockly.Msg.TEXT_CHARAT_FROM_END = "raidė nuo galo #";
Blockly.Msg.TEXT_CHARAT_FROM_START = "gauti raidę #";
Blockly.Msg.TEXT_CHARAT_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-text";  // untranslated
Blockly.Msg.TEXT_CHARAT_INPUT_INTEXT = "tekste";
Blockly.Msg.TEXT_CHARAT_LAST = "gauti paskutinę raidę";
Blockly.Msg.TEXT_CHARAT_RANDOM = "gauti atsitiktinę raidę";
Blockly.Msg.TEXT_CHARAT_TAIL = "";  // untranslated
Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Returns the letter at the specified position.";  // untranslated
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Pridėti teksto elementą.";
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "sujunk";
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Add, remove, or reorder sections to reconfigure this text block.";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "iki raidės nuo galo #";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "iki raidės #";
Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "iki pabaigos";
Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "tekste";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "dalis nuo pradžios";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "dalis nuo raidės #";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "dalis nuo raidės #";
Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Returns a specified portion of the text.";  // untranslated
Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://github.com/google/blockly/wiki/Text#finding-text";  // untranslated
Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "tekste";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "rask,kur pirmą kartą paminėta";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "rask,kur paskutinį kartą paminėta";
Blockly.Msg.TEXT_INDEXOF_TAIL = "";  // untranslated
Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Returns the index of the first/last occurrence of the first text in the second text. Returns 0 if text is not found.";  // untranslated
Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";  // untranslated
Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 yra tuščias";
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Returns true if the provided text is empty.";  // untranslated
Blockly.Msg.TEXT_JOIN_HELPURL = "https://github.com/google/blockly/wiki/Text#text-creation";  // untranslated
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "sukurti tekstą su";
Blockly.Msg.TEXT_JOIN_TOOLTIP = "Create a piece of text by joining together any number of items.";  // untranslated
Blockly.Msg.TEXT_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg.TEXT_LENGTH_TITLE = "teksto %1 ilgis";
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Suranda teksto simbolių kiekį (įskaitant ir tarpus)";
Blockly.Msg.TEXT_PRINT_HELPURL = "https://github.com/google/blockly/wiki/Text#printing-text";  // untranslated
Blockly.Msg.TEXT_PRINT_TITLE = "spausdinti %1";
Blockly.Msg.TEXT_PRINT_TOOLTIP = "Print the specified text, number or other value.";  // untranslated
Blockly.Msg.TEXT_PROMPT_HELPURL = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";  // untranslated
Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Prašyti vartotoją įvesti skaičių.";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Prašyti vartotoją įvesti tekstą.";
Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "paprašyk įvesti skaičių :";
Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "paprašyk įvesti tekstą :";
Blockly.Msg.TEXT_TEXT_HELPURL = "https://en.wikipedia.org/wiki/String_(computer_science)";  // untranslated
Blockly.Msg.TEXT_TEXT_TOOLTIP = "Tekstas (arba žodis, ar raidė)";
Blockly.Msg.TEXT_TRIM_HELPURL = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";  // untranslated
Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "išvalyk tarpus šonuose";
Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "išvalyk tarpus pradžioje";
Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "išvalyk tarpus pabaigoje";
Blockly.Msg.TEXT_TRIM_TOOLTIP = "Return a copy of the text with spaces removed from one or both ends.";  // untranslated
Blockly.Msg.TODAY = "Šiandien";
Blockly.Msg.UNDO = "Undo";  // untranslated
Blockly.Msg.VARIABLES_DEFAULT_NAME = "elementas";
Blockly.Msg.VARIABLES_GET_CREATE_SET = "Sukurk \"priskirk %1\"";
Blockly.Msg.VARIABLES_GET_HELPURL = "https://github.com/google/blockly/wiki/Variables#get";  // untranslated
Blockly.Msg.VARIABLES_GET_TOOLTIP = "Returns the value of this variable.";  // untranslated
Blockly.Msg.VARIABLES_SET = "priskirk %1 = %2";
Blockly.Msg.VARIABLES_SET_CREATE_GET = "Sukurti 'kintamasis %1'";
Blockly.Msg.VARIABLES_SET_HELPURL = "https://github.com/google/blockly/wiki/Variables#set";  // untranslated
Blockly.Msg.VARIABLES_SET_TOOLTIP = "Sets this variable to be equal to the input.";  // untranslated
Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;
Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_DEFRETURN_COMMENT = Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT;
Blockly.Msg.DOBOT_ON = "ON";
Blockly.Msg.DOBOT_OFF = "OFF";
Blockly.Msg.Dobot_Speed = "Speed";
Blockly.Msg.Dobot_DELTAPULSE = "DeltaPulse"
Blockly.Msg.DOBOT_ENABELD = "IsEnabled";
Blockly.Msg.DOBOT_GripperON = "Gripper";
Blockly.Msg.DOBOT_GripperOff = "Release";
Blockly.Msg.DOBOT_GripperPROHIBIT = "Disable";
Blockly.Msg.DOBOT_BASEIC_HOME = "Home";
Blockly.Msg.DOBOT_BASEIC_HOME_TOOLTIP = "Home";
Blockly.Msg.DOBOT_BASEIC_TIME = "GetTime";
Blockly.Msg.DOBOT_BASEIC_TIME_TOOLTIP = "GetTime, unit:s";
Blockly.Msg.DOBOT_BASEIC_SETENDTYPE = "ChooseEndTools";
Blockly.Msg.DOBOT_BASEIC_SETENDTYPE_TOOLTIP = "Choose End Tools";
Blockly.Msg.DOBOT_BASEIC_SETENDTYPE_SUCTIONCAP = "SuctionCup";
Blockly.Msg.DOBOT_BASEIC_SETENDTYPE_GRIPPER = "Gripper";
Blockly.Msg.DOBOT_BASEIC_SETENDTYPE_LASER = "Laser";
Blockly.Msg.DOBOT_BASEIC_SETENDTYPE_PEN = "Pen";
Blockly.Msg.DOBOT_BASEIC_SETENDEFFECTORPARAMS = "Set End Effector Params"; //parekr add 2018 9 8
Blockly.Msg.DOBOT_BASEIC_SETENDEFFECTORPARAMS_TOOLTIP = "Set End Effector Params";
Blockly.Msg.DOBOT_SET_JUMP_HEIGHT = "SetJumpHeight";
Blockly.Msg.DOBOT_SET_JUMP_HEIGHT_TOOLTIP = "Set Jump Height";
Blockly.Msg.DOBOT_SETR = "SetR";
Blockly.Msg.DOBOT_SETR_TOOLTIP = "Set R";
Blockly.Msg.DOBOT_SUCTIONCAP = "SuctionCup";
Blockly.Msg.DOBOT_SUCTIONCAP_TOOLTIP = "SuctionCup";
Blockly.Msg.DOBOT_GRIPPER = "Gripper";
Blockly.Msg.DOBOT_GRIPPER_TOOLTIP = "Gripper";
Blockly.Msg.DOBOT_GET_CURRETN_COORDINATE= "GetCurrentCoordinate";
Blockly.Msg.DOBOT_GET_CURRETN_COORDINATE_TOOLTIP = "Get Current Coordinate";
Blockly.Msg.DOBOT_GET_CURRENT_ANGLE= "GetJointAngle";
Blockly.Msg.DOBOT_GET_CURRENT_ANGLE_TOOLTIP = "Get Joint Angle";
Blockly.Msg.DOBOT_DELAYTIME= "Delaytime";
Blockly.Msg.DOBOT_DELAYTIME_TOOLTIP = "Delaytime";
Blockly.Msg.DOBOT_MOTOR = "Motor"
Blockly.Msg.DOBOT_Value = "value";
Blockly.Msg.DOBOT_FREQUENCY = "frequency";
Blockly.Msg.DOBOT_DUTYCYCLE = "dutyCycle";

Blockly.Msg.DOBOT_joint1 = "Joint1";
Blockly.Msg.DOBOT_joint2 = "Joint2";
Blockly.Msg.DOBOT_joint3 = "Joint3";
Blockly.Msg.DOBOT_joint4 = "Joint4";
Blockly.Msg.DOBOT_covery = "L";							   
Blockly.Msg.DOBOT_xBias = "XBias";
Blockly.Msg.DOBOT_yBias = "YBias";
Blockly.Msg.DOBOT_zBias = "ZBias";
Blockly.Msg.DOBOT_j1 = "Joint1";
Blockly.Msg.DOBOT_j2 = "Joint2";
Blockly.Msg.DOBOT_j3 = "Joint3";
Blockly.Msg.DOBOT_j4 = "Joint4";
Blockly.Msg.DOBOT_j1Velocity = "Joint1Velocity";
Blockly.Msg.DOBOT_j2Velocity = "Joint2Velocity";
Blockly.Msg.DOBOT_j3Velocity = "Joint3Velocity";
Blockly.Msg.DOBOT_j4Velocity = "Joint4Velocity";
Blockly.Msg.DOBOT_j1Acceleration = "Joint1Acceleration";
Blockly.Msg.DOBOT_j2Acceleration = "Joint1Acceleration";
Blockly.Msg.DOBOT_j3Acceleration = "Joint1Accelerationy";
Blockly.Msg.DOBOT_j4Acceleration = "Joint1Acceleration";
Blockly.Msg.DOBOT_height = "Height";
Blockly.Msg.DOBOT_lVelocity = "lVelocity";
Blockly.Msg.DOBOT_lAcceleration = "lAcceleration";
Blockly.Msg.DOBOT_value = "Value";
Blockly.Msg.DOBOT_type = "Type";

Blockly.Msg.DOBOT_THRESHOLD = "Threshold";
Blockly.Msg.DOBOT_ANGLEUNIT = "Degree";
Blockly.Msg.DOBOT_SETLOSTSTEPPARAMS_TOOLTIP = "Set Lost Step Params";
Blockly.Msg.DOBOT_SETLOSTSTEPCMD_TOOLTIP = "Check Lost Step";
Blockly.Msg.Dobot_DISTANCE = "Distance";
Blockly.Msg.Dobot_IO_INPUT_3V = "Input 3.3V";
Blockly.Msg.Dobot_IO_INPUT_5V = "Input 5V";
Blockly.Msg.Dobot_IO_ADC = "Input AD";
Blockly.Msg.Dobot_IO_OUTPUT_3V = "Output 3.3V";
Blockly.Msg.Dobot_IO_OUTPUT_5V = "Output 5V";
Blockly.Msg.Dobot_IO_OUTPUT_12V = "Output 12V";
Blockly.Msg.Dobot_IO_PWM = "Output PWM";
Blockly.Msg.DOBOT_ACCELERATION = "Acceleration";
Blockly.Msg.DOBOT_VELOCITY = "Velocity";


//2017-07-03
Blockly.Msg.DOBOT_SET_JOINT_SPEED = "SetJointSpeed";
Blockly.Msg.DOBOT_SET_JOINT_SPEED_TOOLTIP = "Set Joint Speed";
Blockly.Msg.DOBOT_SET_LINEAR_SPEED = "SetMotionRatio";
Blockly.Msg.DOBOT_SET_LINEAR_SPEED_TOOLTIP = "Set Motion Ratio";
Blockly.Msg.DOBOT_VELOCITY_RATIO = "VelocityRatio";
Blockly.Msg.DOBOT_ACCELERATION_RATIO = "AccelerationRatio";
Blockly.Msg.DOBOT_SET_MOTOR = "SetMotorSpeed";
Blockly.Msg.DOBOT_SET_MOTOR_TOOLTIP = "Set Motor Speed";
Blockly.Msg.DOBOT_SET_MOTORS = "SetMotorSpeedAndDistance";
Blockly.Msg.DOBOT_SET_MOTORS_TOOLTIP = "Set Motor Speed And Distance";
Blockly.Msg.DOBOT_GOTO = "MoveTo";
Blockly.Msg.DOBOT_GOTO_TOOLTIP = "Move to";
Blockly.Msg.DOBOT_JUMPTO = "JumpTo";
Blockly.Msg.DOBOT_JUMPTO_TOOLTIP = "Jump To";
Blockly.Msg.DOBOT_MOVE = "MoveDistance";
Blockly.Msg.DOBOT_MOVE_TOOLTIP = "Move Distance";
Blockly.Msg.DOBOT_SET_JOINT_ANGLE = "SetJointAngle";
Blockly.Msg.DOBOT_SET_JOINT_ANGLE_TOOLTIP = "Set Joint Angle";
Blockly.Msg.DOBOT_SET_INFRARED_SENEOR = "SetPhotoelectricSensor";
Blockly.Msg.DOBOT_SET_INFRARED_SENEOR_TOOLTIP = "Set Photoelectric Sensor";
Blockly.Msg.DOBOT_GET_INFRARED_SENEOR = "GetPhotoelectricSensor";
Blockly.Msg.DOBOT_GET_INFRARED_SENEOR_TOOLTIP = "Detection of sensors in front of a certain distance whether there is an object, there are objects for 1; no object for 0.";
Blockly.Msg.DOBOT_SET_COLORSENEOR= "SetColorSensor";
Blockly.Msg.DOBOT_SET_COLORSENEOR_TOOLTIP = "Set Color Sensor";
Blockly.Msg.DOBOT_GET_COLORSENEOR= "IdentifyColor";
Blockly.Msg.DOBOT_GET_COLORSENEOR_TOOLTIP = "Used to identify 3 basic colors: blue, green, and red. Returns 1 when detecting the color, or else returns 0.";
Blockly.Msg.DOBOT_SET_CONVEYOR = "SetConveyor"
Blockly.Msg.DOBOT_SET_CONVEYOR_TOOLTIP = "Set Conveyor"
Blockly.Msg.DOBOT_SET_LINEAR_RAIL = "SetLinearRail"
Blockly.Msg.DOBOT_SET_LINEAR_RAIL_TOOLTIP = "Set Linear Rail"
Blockly.Msg.DOBOT_SETL = "MoveLinearRailTo";
Blockly.Msg.DOBOT_SETL_TOOLTIP = "Move Linear Rail To";
Blockly.Msg.DOBOT_SET_L_SPEED = "SetLinearRailSpeed";
Blockly.Msg.DOBOT_SET_L_SPEED_TOOLTIP = "Set Linear Rail Speed";
Blockly.Msg.DOBOT_POWER = "Power";
Blockly.Msg.DOBOT_LASER = "Laser";
Blockly.Msg.DOBOT_LASER_TOOLTIP = "Laser";
Blockly.Msg.DOBOT_SET_OUTPUT12V = "Set12VOutput  ";
Blockly.Msg.DOBOT_SET_OUTPUT12V_TOOLTIP = "Set 12V Output";
Blockly.Msg.DOBOT_SET_OUTPUT= "SetLevelOutput  ";
Blockly.Msg.DOBOT_SET_OUTPUT_TOOLTIP = "Set Level Output";
Blockly.Msg.DOBOT_GET_INPUT_EIO= "GetLevelInput  ";
Blockly.Msg.DOBOT_GET_INPUT_EIO_TOOLTIP = "Get Level Input";
Blockly.Msg.DOBOT_SET_PWM = "SetPWMOutput  ";
Blockly.Msg.DOBOT_SET_PWM_TOOLTIP = "Set PWM Output";
Blockly.Msg.DOBOT_GET_PWM = "GetPWMInput  ";
Blockly.Msg.DOBOT_GET_PWM_TOOLTIP = "Get PWM Input";
Blockly.Msg.DOBOT_GET_ADC = "GetADInput  ";
Blockly.Msg.DOBOT_GET_ADC_TOOLTIP = "Get AD Input";
Blockly.Msg.DOBOT_SET_IOMULTIPLEXING= "SetIOMultiplexing";
Blockly.Msg.DOBOT_SET_IOMULTIPLEXING_TOOLTIP = "SetIOMultiplexing";

//2017-09-27
Blockly.Msg.DOBOT_SET_COORDINATE_SPEED = "SetCoordinateSpeed";
Blockly.Msg.DOBOT_SET_COORDINATE_SPEED_TOOLTIP = "Set Coordinate Speed";

//2018-04-21
Blockly.Msg.DOBOT_SET_OUTPUT5V = "Set5VOutput  ";
Blockly.Msg.DOBOT_SET_OUTPUT5V_TOOLTIP = "Set 5V Output";

//2018-06-06
Blockly.Msg.DOBOT_PORT = "Port";
Blockly.Msg.DOBOT_HARDWARE = "Hardware";
Blockly.Msg.DOBOT_NEW = "V2";
Blockly.Msg.DOBOT_OLD = "V1";
Blockly.Msg.DOBOT_VERSION = "Version";


//2019-04-25
Blockly.Msg.DOBOT_MagicianLite = "Magician Lite";
Blockly.Msg.DOBOT_Controller = "Magic Box";
Blockly.Msg.DOBOT_DevType = "DevType";

Blockly.Msg.DOBOT_Set_SeeedRgbLED = "SetSeeedRgbLED";
Blockly.Msg.DOBOT_Set_SeeedRgbLED_TOOLTIP = "SetSeeedRgbLED";
Blockly.Msg.DOBOT_Get_SeeedColorSensor = "GetSeeedColorSensor";
Blockly.Msg.DOBOT_Get_SeeedColorSensor_TOOLTIP = "GetSeeedColorSensor";
Blockly.Msg.DOBOT_Set_SeeedColorSensor = "SetSeeedColorSensor";
Blockly.Msg.DOBOT_Set_SeeedColorSensor_TOOLTIP = "SetSeeedColorSensor";
Blockly.Msg.DOBOT_Get_SeeedInfraredSensor = "GetSeeedInfraredSensor";
Blockly.Msg.DOBOT_Get_SeeedInfraredSensor_TOOLTIP = "GetSeeedInfraredSensor";
Blockly.Msg.DOBOT_Set_SeeedInfraredSensor = "SetSeeedInfraredSensor";
Blockly.Msg.DOBOT_Set_SeeedInfraredSensor_TOOLTIP = "SetSeeedInfraredSensor";
Blockly.Msg.DOBOT_Get_SeeedTemperatureSensor = "GetSeeedTemperatureSensor";
Blockly.Msg.DOBOT_Get_SeeedTemperatureSensor_TOOLTIP = "GetSeeedTemperatureSensor";
Blockly.Msg.DOBOT_Set_SeeedTemperatureSensor = "SetSeeedTemperatureSensor";
Blockly.Msg.DOBOT_Set_SeeedTemperatureSensor_TOOLTIP = "SetSeeedTemperatureSensor";
Blockly.Msg.DOBOT_Get_SeeedDistanceSensor = "GetSeeedDistanceSensor";
Blockly.Msg.DOBOT_Get_SeeedDistanceSensor_TOOLTIP = "GetSeeedDistanceSensor";

//2019-11-06
Blockly.Msg.DOBOT_GET_ENDEFFECTORTYPE = "GetEndEffectorType";
Blockly.Msg.DOBOT_GET_ENDEFFECTORTYPE_TOOLTIP = "GetEndEffectorType";
Blockly.Msg.DOBOT_SET_SERVOANGLE = "SetServoAngle";
Blockly.Msg.DOBOT_SET_SERVOANGLE_TOOLTIP = "SetServoAngle";
Blockly.Msg.DOBOT_SERVO_PORT = "Servo";
Blockly.Msg.DOBOT_SERVO_ANGLE_VALUE = "Angle value";
Blockly.Msg.DOBOT_GET_SERVOANGLE = "GetServoAngle";
Blockly.Msg.DOBOT_GET_SERVOANGLE_TOOLTIP = "GetServoAngle";
// Blockly.Msg.DOBOT_SERVO_ANGLE = "度";
Blockly.Msg.DOBOT_SET_ARM_SPEED_RATIO = "SetArmSpeedRatio";
Blockly.Msg.DOBOT_SET_ARM_SPEED_RATIO_TOOLTIP = "SetArmSpeedRatio";
Blockly.Msg.DOBOT_SET_ARM_SPEED_MODE = "Run Mode";
Blockly.Msg.DOBOT_SET_ARM_SPEED_MODE_JOG = "JOG";
Blockly.Msg.DOBOT_SET_ARM_SPEED_MODE_OTHER = "OTHER";
Blockly.Msg.DOBOT_GET_ARM_SPEED_RATIO = "GetArmSpeedRatio";
Blockly.Msg.DOBOT_GET_ARM_SPEED_RATIO_TOOLTIP = "GetArmSpeedRatio";
Blockly.Msg.DOBOT_SET_Liner_SPEED_RATIO = "SetLSpeedRatio";
Blockly.Msg.DOBOT_SET_Liner_SPEED_RATIO_TOOLTIP = "SetLSpeedRatio";
Blockly.Msg.DOBOT_GET_Liner_SPEED_RATIO = "GetLSpeedRatio";
Blockly.Msg.DOBOT_GET_Liner_SPEED_RATIO_TOOLTIP = "GetLSpeedRatio";
Blockly.Msg.DOBOT_SET_LinearRail_SPEED_MODE = "Run Mode";
Blockly.Msg.DOBOT_SET_LinearRail_SPEED_MODE_JOG = "JOG";
Blockly.Msg.DOBOT_SET_LinearRail_SPEED_MODE_PTP = "PTP";
Blockly.Msg.DOBOT_SET_PROGBAR = "SetProgbar";
Blockly.Msg.DOBOT_SET_PROGBAR_VALUE = "Progress value";
Blockly.Msg.DOBOT_SET_PROGBAR_TOOLTIP = "SetProgbar";
Blockly.Msg.DOBOT_SET_PRINTINFO = "PrintInfo";
Blockly.Msg.DOBOT_SET_PRINTINFO_VALUE = "Infomation";
Blockly.Msg.DOBOT_SET_PRINTINFO_TOOLTIP = "PrintInfo";
Blockly.Msg.ADDPOINT = "AddPoint";							